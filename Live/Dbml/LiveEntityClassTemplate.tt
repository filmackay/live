<#+
/// <summary>
/// Generates the generated Entity class based on the LINQ to SQL DBML
/// </summary>
/// <remarks>
/// There are several important differences in code produced by this template compared
/// to the standard MSLinqToSQLGenerator.
/// <para>
/// While MSLinqToSQLGenerator uses fully-qualified, global:: type names, this template
/// produces code with “using” directives and abbreviated names. This is done to make
/// the generated code easier to read.
/// </para>
/// <para>
/// While MSLinqToSQLGenerator generates field names as property name with an
/// underscore prefix, this method simply converts the property name to camelCase.
/// This is done for consistency with the StyleCop rule SA1306: Variable names
/// must start with a lower-case letter.
/// </para>
/// <para>
/// While MSLinqToSQLGenerator assumes that unknown data types are reference types
/// this method assumes that unknown types are value types. Assuming that users
/// will mostly use built-in types or known CLR types in the model, the most
/// frequently used custom types will be enumerations. Treating unknown types as
/// value types allows us to generate nullable enum types when model defines a
/// nullable property.
/// </para>
/// <para>
/// While MSLinqToSQLGenerator always emits [InheritanceMapping] attributes with
/// inheritance code values enclosed in double quotation marks, making them strings,
/// this generator emits them verbatim, preserving the original data type. This
/// allows using enum values as inheritance code directly, without the need to
/// convert. User can still use string values by enclosing them in double quotation
/// marks in the model/designer.
/// </para>
/// <para>
/// While MSLinqToSQLGenerator produces Entity code that fires PropertyChanging
/// event with empty property name, this template produces code fires PropertyChanging
/// events with actual property names
/// </para>
/// </remarks>
public class LiveEntityClassTemplate : CSharpTemplate
{
    /// <summary>
    /// Contains <see cref="Association"/> objects extracted from the the current
    /// <see cref="Type"/> for quick access.
    /// </summary>
    private System.Collections.Generic.List<Association> associations;

    /// <summary>
    /// Contains <see cref="Column"/> object extracted from the the current <see cref="Type"/>
    /// for quick access.
    /// </summary>
    private System.Collections.Generic.List<Column> columns;

    /// <summary>
    /// Stores serialization order number of the last generated column or association property.
    /// </summary>
    private int dataMemberOrder;

    /// <summary>
    /// Indicates whether current <see cref="Table"/> has a <see cref="Column"/> object
    /// with <see cref="Column.IsForeignKey"/> property set to <c>true</c>.
    /// </summary>
    //private bool tableHasPrimaryKey;

    /// <summary>
    /// Indicates whether current <see cref="Type"/> has an <see cref="Association"/> object
    /// that needs to be serialized and requires supporting code.
    /// </summary>
    private bool typeHasSerializableAssociation;

    /// <summary>
    /// Gets or sets an array of <see cref="Type"/> objects that encapsulate definition of
    /// the base types 
    /// </summary>
    /// <value>
    /// An array of <see cref="Type"/> object with first item being the immediate parent of
    /// the data class.
    /// </value>
    /// <remarks>
    /// This property must be specified for a derived data class.
    /// </remarks>
    public Type[] BaseTypes { get; set; }

    /// <summary>
    /// Gets or sets LINQ to SQL database model
    /// </summary>
    public Database Database { get; set; }

    /// <summary>
    /// Gets or sets a <see cref="Table"/> object that encapsulates a database table
    /// to which a LINQ to SQL Data Class is mapped.
    /// </summary>
    public Table Table { get; set; }

    /// <summary>
    /// Gets or sets <see cref="Type"/> object that encapsulates Data Class defined
    /// in the LINQ to SQL model.
    /// </summary>
    public Type Type { get; set; }

	/// <summary>
	/// Directs output of the template to a separate file by default. User can override
	/// default behavior by assigning <see cref="Rendering"/> event handler.
	/// </summary>
	protected override void OnRendering(System.EventArgs e)
	{
	    this.Output.File = this.Type.Name + ".generated.cs";
		base.OnRendering(e);
	}

    /// <summary>
    /// Generates a partial entity class for the specified <see cref="Type"/>
    /// </summary>
    public override string TransformText()
    {
        base.TransformText();

        this.dataMemberOrder = 0;
        this.ParseTypeDefinition();
#>
namespace <#= this.Database.EntityNamespace #>
{
    using System;
    using System.ComponentModel;
    using System.Data.Linq;
    using System.Data.Linq.Mapping;
	using Vertigo.Live;
<#+
        this.PushIndent("    ");
        this.RenderUsingDirectives();
        this.WriteLine(string.Empty);
        this.RenderDataContractAttribute();
        this.RenderTableAttribute();
        this.RenderInheritanceMappingAttributes(this.Type);
        this.PopIndent();
#>
    <#= AccessModifier(this.Type) #> <#= InheritanceModifier(this.Type) #>partial class <#= this.Type.Name #><#= this.GetClassBase() #> : ILiveEntity<<#= this.Type.Name #>>
    {
<#+
        this.PushIndent("        ");
        this.columns.ForEach(this.RenderField);
        this.RenderSerializationField();
        this.RenderConstructor();
		this.RenderILiveEntity();
        this.columns.ForEach(this.RenderProperty);
        this.associations.ForEach(this.RenderAssociationProperty);
        this.RenderSerializationMethods();
        this.PopIndent();
#>
    }
}
<#+
        return this.GenerationEnvironment.ToString();
    }

    /// <summary>
    /// Validates code generation parameters
    /// </summary>
    protected override void Validate()
    {
        if (this.BaseTypes == null)
        {
            this.BaseTypes = new Type[] {};
        }

        foreach (Type baseType in this.BaseTypes)
        {
            if (baseType == null)
            {
                throw new TransformationException("BaseTypes items cannot be null");
            }
        }

        if (this.Database == null)
        {
            throw new TransformationException("Database property must be assigned");
        }

        if (string.IsNullOrEmpty(this.Database.EntityNamespace))
        {
            throw new TransformationException("EntityNamespace property of the Database object must be assigned");
        }

        if (this.Type == null)
        {
            throw new TransformationException("Type property must be assigned");
        }

        // Make sure Items array is not null so that we don't have to check every time
        if (this.Type.Items == null)
        {
            this.Type.Items = new object[0];
        }

        if (this.Table == null)
        {
            throw new TransformationException("Table property must be assigned");
        }
    }

    /// <summary>
    /// Returns access modifier (public, internal, etc.) of the specified <paramref name="association"/>.
    /// </summary>
    private static string AccessModifier(Association association)
    {
        return ToCSharp(association.AccessModifier);
    }

    /// <summary>
    /// Returns access modifier (public, internal, etc.) of the specified <paramref name="column"/>.
    /// </summary>
    private static string AccessModifier(Column column)
    {
        return ToCSharp(column.AccessModifier);
    }

    /// <summary>
    /// Returns access modifier (public, internal, etc.) of the specified <paramref name="type"/>.
    /// </summary>
    private static string AccessModifier(Type type)
    {
        return ToCSharp(type.AccessModifier);
    }

    /// <summary>
    /// Converts built-in C# type name to a fully-qualified CLR type name
    /// </summary>
    private static string ClrTypeName(string typeName)
    {
        switch (string.Intern(typeName))
        {
            case "bool":     return "System.Boolean";
            case "byte":     return "System.Byte";
            case "sbyte":    return "System.SByte";
            case "char":     return "System.Char";
            case "decimal":  return "System.Decimal";
            case "double":   return "System.Double";
            case "float":    return "System.Single";
            case "int":      return "System.Int32";
            case "uint":     return "System.UInt32";
            case "long":     return "System.Int64";
            case "ulong":    return "System.UInt64";
            case "object":   return "System.Object";
            case "short":    return "System.Int16";
            case "ushort":   return "System.UInt16";
            case "string":   return "System.String";
            case "TimeSpan": return "System.TimeSpan";
            case "DateTime": return "System.DateTime";
            case "DateTimeOffset": return "System.DateTimeOffset";
            case "Binary":   return "System.Data.Linq.Binary";
            default:         return typeName;
        }
    }

    /// <summary>
    /// Converts a fully-qualified CLR type name to a built-in C# type name
    /// </summary>
    private static string CSharpTypeName(string typeName)
    {
        switch (string.Intern(typeName))
        {
            case "System.Boolean":          return "bool";
            case "System.Byte":             return "byte";
            case "System.SByte":            return "sbyte";
            case "System.Char":             return "char";
            case "System.Decimal":          return "decimal";
            case "System.Double":           return "double";
            case "System.Single":           return "float";
            case "System.Int32":            return "int";
            case "System.UInt32":           return "uint";
            case "System.Int64":            return "long";
            case "System.UInt64":           return "ulong";
            case "System.Object":           return "object";
            case "System.Int16":            return "short";
            case "System.UInt16":           return "ushort";
            case "System.String":           return "string";
            case "System.DateTime":         return "DateTime";
            case "System.DateTimeOffset":   return "DateTimeOffset";
            case "System.TimeSpan": 		return "TimeSpan";
            case "System.Data.Linq.Binary": return "Binary";
            default:                        return typeName;
        }
    }

    /// <summary>
    ///    Returns field name for the specified <paramref name="association"/>
    /// </summary>
    private static string FieldName(Association association)
    {
        return FieldName(association.Member);
    }

    /// <summary>
    ///    Returns field name for the specified <paramref name="column"/>
    /// </summary>
    private static string FieldName(Column column)
    {
        if (!string.IsNullOrEmpty(column.Member))
            return FieldName(column.Member);
        else
            return FieldName(column.Name);
    }

    /// <summary>
    /// Returns an Association object that represents a foreign key which contains
    /// the specified <paramref name="column"/> or null, if the column is not a part
    /// of any foreign key.
    /// </summary>
    private Association FindForeignKey(Column column)
    {
        foreach (Association association in this.associations)
        {
            if (association.IsForeignKey && !string.IsNullOrEmpty(association.ThisKey))
            {
                string[] columnNames = association.ThisKey.Split(new char[]{',', ' '});
                if (Array.IndexOf(columnNames, PropertyName(column)) >= 0)
                {
                    return association;
                }
            }
        }

        return null;
    }

    /// <summary>
    /// Returns class-base specification of the entity class which may include base
    /// class and interfaces it implements.
    /// </summary>
    private string GetClassBase()
    {
        string classBase = string.Empty;

        if (this.BaseTypes.Length > 0)
            classBase += this.BaseTypes[0].Name;

        if (classBase.Length > 0)
            return " : " + classBase;

        return string.Empty;
    }

    /// <summary>
    /// Returns matching association from the target type of the specified <paramref name="association"/>
    /// </summary>
    private Association FindOtherAssociation(Association association)
    {
        Type otherType = this.GetTypeByName(association.Type);
        for (var i = 0; i < otherType.Items.Length; i++)
        {
            Association otherAssociation = otherType.Items[i] as Association;
            if (otherAssociation != null &&
                this.Type.Name == otherAssociation.Type &&
                association.OtherKey == otherAssociation.ThisKey)
            {
                return otherAssociation;
            }
        }

        return null;
    }

    /// <summary>
    /// Returns a type with the specified <paramref name="typeName"/> defined in the
    /// current <see cref="Database"/>.
    /// </summary>
    private Type GetTypeByName(string typeName)
    {
        foreach (Table table in this.Database.Table)
        {
            Type type = LinqToSqlGenerator.FindType(table.Type, typeName);
            if (type != null)
            {
                return type;
            }
        }

        throw new TransformationException(string.Format("Type {0} doesn't exist.", typeName));
    }

    /// <summary>
    /// Returns inheritance modifier (virtual, override, etc.) for the specified <paramref name="association"/>
    /// </summary>
    private static string InheritanceModifier(Association association)
    {
        return ToCSharp(association.Modifier, association.ModifierSpecified);
    }

    /// <summary>
    /// Returns inheritance modifier (virtual, override, etc.) for the specified <paramref name="column"/>
    /// </summary>
    private static string InheritanceModifier(Column column)
    {
        return ToCSharp(column.Modifier, column.ModifierSpecified);
    }

    /// <summary>
    /// Returns inheritance modifier (abstract, sealed, etc.) for the specified <paramref name="type"/>
    /// </summary>
    private static string InheritanceModifier(Type type)
    {
        if (type.ModifierSpecified)
        {
            return type.Modifier.ToString().ToLower() + " ";
        }

        // When "None" was selected in the designer
        return string.Empty;
    }

    /// <summary>
    /// Returns true if the specified <paramref name="type"/> should be serialized.
    /// </summary>
    private bool IsDataContract(Type type)
    {
        return this.Database.Serialization == SerializationMode.Unidirectional &&
            type.AccessModifier == GeneratedTextTransformation.AccessModifier.Public;
    }

    /// <summary>
    /// Returns true if the specified <paramref name="association"/> should be serialized.
    /// </summary>
    private bool IsDataMember(Association association)
    {
        return this.IsDataContract(this.Type) && association.IsForeignKey == false &&
            association.AccessModifier == GeneratedTextTransformation.AccessModifier.Public;
    }

    /// <summary>
    /// Returns true if the specified <paramref name="column"/> should be serialized.
    /// </summary>
    private bool IsDataMember(Column column)
    {
        return this.IsDataContract(this.Type) &&
            column.AccessModifier == GeneratedTextTransformation.AccessModifier.Public;
    }

    /// <summary>
    /// Extracts frequently used objects, such as <see cref="Column"/> and <see cref="Association"/>
    /// from the type definition for quick access.
    /// </summary>
    private void ParseTypeDefinition()
    {
        // Prepare all associations and columns for quick access
        this.associations = new System.Collections.Generic.List<Association>();
        this.columns = new System.Collections.Generic.List<Column>();
        for (int i = 0; i < this.Type.Items.Length; i++)
        {
            Column column = this.Type.Items[i] as Column;
            if (column != null)
            {
                this.columns.Add(column);
                continue;
            }

            Association association = this.Type.Items[i] as Association;
            if (association != null)
            {
                this.associations.Add(association);
                continue;
            }
        }

        // Determine if the type has a serializable association
        this.typeHasSerializableAssociation = this.associations.Exists(this.IsDataMember);

        // Determine if table has primary key
        //this.tableHasPrimaryKey = false;
        //for (int i = 0; i < this.Table.Type.Items.Length; i++)
        //{
        //    Column column = this.Table.Type.Items[i] as Column;
        //    if (column != null && column.IsPrimaryKey)
        //    {
        //        this.tableHasPrimaryKey = true;
        //        break;
        //    }
        //}
    }

    /// <summary>
    /// Returns property name for the specified <paramref name="association"/>
    /// </summary>
    private static string PropertyName(Association association)
    {
        return PropertyName(association.Member);
    }

    /// <summary>
    /// Returns property name for the specified <paramref name="column"/>
    /// </summary>
    private static string PropertyName(Column column)
    {
        if (!string.IsNullOrEmpty(column.Member))
            return PropertyName(column.Member);
        else
            return PropertyName(column.Name);
    }

    /// <summary>
    /// Renders [Association(...)] attribute for a property
    /// </summary>
    private void RenderAssociationAttribute(Association association)
    {
        System.Collections.Generic.List<string> parameters = new System.Collections.Generic.List<string>();

        if (!string.IsNullOrEmpty(association.Name))
        {
            parameters.Add(string.Format("Name = \"{0}\"", association.Name));
        }

        if (!string.IsNullOrEmpty(FieldName(association)))
        {
            parameters.Add(string.Format("Storage = \"{0}\"", FieldName(association)));
        }

        if (!string.IsNullOrEmpty(association.ThisKey))
        {
            parameters.Add(string.Format("ThisKey = \"{0}\"", association.ThisKey));
        }

        if (!string.IsNullOrEmpty(association.OtherKey))
        {
            parameters.Add(string.Format("OtherKey = \"{0}\"", association.OtherKey));
        }

        if (!association.IsForeignKey && CardinalityIsOne(association))
        {
            parameters.Add("IsUnique = true");
        }

        if (association.IsForeignKey || association.IsForeignKeySpecified)
        {
            parameters.Add(string.Format("IsForeignKey = {0}", association.IsForeignKey.ToString().ToLower()));
        }

        if (association.DeleteOnNull || association.DeleteOnNullSpecified)
        {
            parameters.Add(string.Format("DeleteOnNull = {0}", association.DeleteOnNull.ToString().ToLower()));
        }

        if (!string.IsNullOrEmpty(association.DeleteRule))
        {
            parameters.Add(string.Format("DeleteRule = \"{0}\"", association.DeleteRule));
        }

        this.WriteLine("[Association({0})]", string.Join(", ", parameters.ToArray()));
    }

    /// <summary>
    /// Renders [Column(...)] attribute for a property
    /// </summary>
    private void RenderColumnAttribute(Column column)
    {
        System.Collections.Generic.List<string> parameters = new System.Collections.Generic.List<string>();

        if (!string.IsNullOrEmpty(column.Name))
        {
            parameters.Add(string.Format("Name = \"{0}\"", column.Name));
        }

        if (!string.IsNullOrEmpty(FieldName(column)))
        {
            parameters.Add(string.Format("Storage = \"{0}\"", FieldName(column)));
        }

        if (column.CanBeNull || column.CanBeNullSpecified)
        {
            parameters.Add(string.Format("CanBeNull = {0}", column.CanBeNull.ToString().ToLower()));
        }

        if (!string.IsNullOrEmpty(column.DbType))
        {
            parameters.Add(string.Format("DbType = \"{0}\"", column.DbType));
        }

        if (!string.IsNullOrEmpty(column.Expression))
        {
            parameters.Add(string.Format("Expression = \"{0}\"", column.Expression));
        }

        if (column.IsDbGenerated || column.IsDbGeneratedSpecified)
        {
            parameters.Add(string.Format("IsDbGenerated = {0}", column.IsDbGenerated.ToString().ToLower()));
        }

        if (column.IsDiscriminator || column.IsDiscriminatorSpecified)
        {
            parameters.Add(string.Format("IsDiscriminator = {0}", column.IsDiscriminator.ToString().ToLower()));
        }

        if (column.IsPrimaryKey || column.IsPrimaryKeySpecified)
        {
            parameters.Add(string.Format("IsPrimaryKey = {0}", column.IsPrimaryKey.ToString().ToLower()));
        }

        if (column.IsVersion || column.IsVersionSpecified)
        {
            parameters.Add(string.Format("IsVersion = {0}", column.IsVersion.ToString().ToLower()));
        }

        if (column.UpdateCheck != default(UpdateCheck))
        {
            parameters.Add(string.Format("UpdateCheck = UpdateCheck.{0}", column.UpdateCheck));
        }

        this.WriteLine("[Column({0})]", string.Join(", ", parameters.ToArray()));
    }

    /// <summary>
    /// Renders constructor of the entity class
    /// </summary>
    private void RenderConstructor()
    {
#>

partial void OnCreated();

public <#= this.Type.Name #>()
{
<#+
        foreach (Association association in this.associations)
        {
			var info = GetAssociationInfo(this.Database, association.Name);

			// primary/N side of 1:N association
            if (!association.IsForeignKey && !CardinalityIsOne(association))
            {
#>
    this.<#= FieldName(info.PrimaryAssociation) #> = new LiveEntitySet<<#= this.Type.Name #>,<#= info.PrimaryAssociation.Type #>>(this, foreign => foreign.<#= info.ForeignAssociation.Member #>);
<#+
            }

			// foreign/1 side of 1:N association
            if (association.IsForeignKey && !CardinalityIsOne(info.PrimaryAssociation))
            {
#>
    this.<#= FieldName(info.ForeignAssociation) #> = new LiveEntitySetForeign<<#= this.Type.Name #>,<#= info.ForeignAssociation.Type #>>(this, primary => primary.<#= info.PrimaryAssociation.Member #>, (primary, foreign) =>
	{
<#+
				foreach (var keys in info.PrimaryAssociation.ThisKey.Split(new[] {','}).Zip(info.ForeignAssociation.ThisKey.Split(new[] {','}), (PrimaryKey, ForeignKey) => new { PrimaryKey, ForeignKey }))
				{ 
#>
	    foreign.<#= keys.PrimaryKey #>.Value = primary.<#= keys.ForeignKey #>.Value;
<#+
				}
#>
	});
<#+
			}
			
			// primary side of 1:1 association
            if (!association.IsForeignKey && CardinalityIsOne(association))
            {
#>
    this.<#= FieldName(info.PrimaryAssociation) #> = new LiveAssociationPrimary<<#= this.Type.Name #>,<#= info.PrimaryAssociation.Type #>>(this, foreign => foreign.<#= info.ForeignAssociation.Member #>);
<#+
            }

			// foreign side of 1:N association
            if (association.IsForeignKey && CardinalityIsOne(info.PrimaryAssociation))
            {
#>
    this.<#= FieldName(info.ForeignAssociation) #> = new LiveAssociationForeign<<#= this.Type.Name #>,<#= info.ForeignAssociation.Type #>>(this, primary => primary.<#= info.PrimaryAssociation.Member #>, (primary, foreign) =>
	{
<#+
				foreach (var keys in info.PrimaryAssociation.ThisKey.Split(new[] {','}).Zip(info.ForeignAssociation.ThisKey.Split(new[] {','}), (ParentKey, ChildKey) => new { ParentKey, ChildKey }))
				{
#>
	    foreign.<#= keys.ParentKey #>.Value = primary.<#= keys.ChildKey #>.Value<#= info.ForeignTable.Type.Items.OfType<Column>().Single(c => c.Name == keys.ChildKey).CanBeNull ? ".Value" : "" #>;
<#+
				}
#>
	});
<#+
            }
        }
#>
	OnCreated();
}

<#+
    }

    /// <summary>
    /// Renders constructor of the Table reference
    /// </summary>
    private void RenderILiveEntity()
    {
#>
#region ILiveEntity implementation

private LiveTable<<#= this.Type.Name #>> _table;
public LiveTable<<#= this.Type.Name #>> Table
{
	get { return _table; }
	set
	{
		if (_table == value)
			return;
	
		if (_table != null)
			_table.Inner.Remove(this);
		
		if (value != null)
			value.Inner.Add(this);
	}
}

public LiveDataContext DataContext
{
	get { return _table.DataContext; }
	set	{ Table = (value as <#= this.Database.Class #>).<#= this.Table.Member #>;	}
}

public void InternalAttach(LiveTable<<#= this.Type.Name #>> table)
{
	_table = table;

    // push context to foreign entities
<#+
    foreach (var association in this.associations.Where(a => !a.IsForeignKey))
    {
        if (CardinalityIsOne(association))
        {
#>
    <#= FieldName(association) #>.Value.DataContext = table.DataContext;
<#+
        }
        else
        {
#>
    foreach (var entity in <#= FieldName(association) #>.Inner)
        entity.DataContext = table.DataContext;
<#+
        }
    }
#>    
}

#endregion
<#+
    }

    /// <summary>
    /// Renders [DataContract] attribute for the entity class if serialization
    /// option was specified for the Data Context in the LINQ to SQL model.
    /// </summary>
    private void RenderDataContractAttribute()
    {
        if (this.IsDataContract(this.Type))
        {
            this.WriteLine("[DataContract]");
        }
    }

    /// <summary>
    /// Renders [DataMember] attribute for the association property if serialization
    /// option was specified for the Data Context in the LINQ to SQL model.
    /// </summary>
    private void RenderDataMemberAttribute(Association association)
    {
        if (this.IsDataMember(association))
        {
            this.WriteLine("[DataMember(Order = {0}, EmitDefaultValue = false)]", ++this.dataMemberOrder);
        }
    }

    /// <summary>
    /// Renders [DataMember] attribute for the column property if serialization
    /// option was specified for the Data Context in the LINQ to SQL model.
    /// </summary>
    private void RenderDataMemberAttribute(Column column)
    {
        if (this.IsDataMember(column))
        {
            this.WriteLine("[DataMember(Order = {0})]", ++this.dataMemberOrder);
        }
    }

    /// <summary>
    /// Renders field declaration for the specified <paramref name="column"/>
    /// </summary>
    private void RenderField(Column column)
    {
#>
private Live<<#= TypeName(column) #>> <#= FieldName(column) #> = new Live<<#= TypeName(column) #>>();
<#+
    }

    /// <summary>
    /// Renders [InheritanceMapping] attribute for the specified <paramref name="type"/>
    /// and all of its child types defined in the LINQ to SQL model.
    /// </summary>
    private void RenderInheritanceMappingAttributes(Type type)
    {
        if (this.BaseTypes.Length == 0)
        {
            if (!string.IsNullOrEmpty(type.InheritanceCode))
            {
                this.Write("[InheritanceMapping(Code={0}, Type=typeof({1})", type.InheritanceCode, type.Name);
                if (type.IsInheritanceDefault)
                    this.Write(", IsDefault=true");
                this.WriteLine(")]");
            }

            if (type.Type1 != null)
            {
                Array.ForEach(type.Type1, this.RenderInheritanceMappingAttributes);
            }
        }
    }

    /// <summary>
    /// Renders property definition for the specified <paramref name="association"/>
    /// </summary>
    private void RenderAssociationProperty(Association association)
    {
        this.WriteLine(string.Empty);
        this.RenderDataMemberAttribute(association);  // [DataMember(...)]
        this.RenderAssociationAttribute(association); // [Association(...)]

        Column[] thisKeyColumns = LinqToSqlGenerator.GetColumnsFromKey(this.Type, this.BaseTypes, association.ThisKey);
        string[] otherKeyColumnNames = LinqToSqlGenerator.GetColumnNamesFromKey(association.OtherKey);
        if (thisKeyColumns.Length != otherKeyColumnNames.Length)
        {
            throw new TransformationException(string.Format(
                "Invalid association. Number of columns in ThisKey ({0}) and OtherKey ({1}) doesn't match",
                association.ThisKey, association.OtherKey));
        }

		var info = GetAssociationInfo(this.Database, association.Name);

		// primary/N side of 1:N association
        if (!association.IsForeignKey && !CardinalityIsOne(association))
        {
#>
private LiveEntitySet<<#= this.Type.Name #>,<#= info.PrimaryAssociation.Type #>> <#= FieldName(association) #>;
<#= AccessModifier(association) #> <#= InheritanceModifier(association) #>LiveEntitySet<<#= this.Type.Name #>,<#= info.PrimaryAssociation.Type #>> <#= PropertyName(association) #> { get { return this.<#= FieldName(association) #>; } }
<#+
        }

		// foreign/1 side of 1:N association
        if (association.IsForeignKey && !CardinalityIsOne(info.PrimaryAssociation))
        {
#>
private LiveEntitySetForeign<<#= this.Type.Name #>,<#= info.ForeignAssociation.Type #>> <#= FieldName(association) #>;
<#= AccessModifier(association) #> <#= InheritanceModifier(association) #>LiveEntitySetForeign<<#= this.Type.Name #>,<#= info.ForeignAssociation.Type #>> <#= PropertyName(association) #> { get { return this.<#= FieldName(association) #>; } }
<#+
		}

		// primary side of 1:1 association
        if (!association.IsForeignKey && CardinalityIsOne(association))
        {
#>
private LiveAssociationPrimary<<#= this.Type.Name #>,<#= info.PrimaryAssociation.Type #>> <#= FieldName(association) #>;
<#= AccessModifier(association) #> <#= InheritanceModifier(association) #>LiveAssociationPrimary<<#= this.Type.Name #>,<#= info.PrimaryAssociation.Type #>> <#= PropertyName(association) #> { get { return this.<#= FieldName(association) #>; } }
<#+
        }

		// foreign side of 1:N association
        if (association.IsForeignKey && CardinalityIsOne(info.PrimaryAssociation))
        {
#>
private LiveAssociationForeign<<#= this.Type.Name #>,<#= info.ForeignAssociation.Type #>> <#= FieldName(association) #>;
<#= AccessModifier(association) #> <#= InheritanceModifier(association) #>LiveAssociationForeign<<#= this.Type.Name #>,<#= info.ForeignAssociation.Type #>> <#= PropertyName(association) #> { get { return this.<#= FieldName(association) #>; } }
<#+
        }
    }

    /// <summary>
    /// Renders property definition for the specified <paramref name="column"/>
    /// </summary>
    private void RenderProperty(Column column)
    {
        this.WriteLine(string.Empty);
        this.RenderDataMemberAttribute(column); // [DataMember(...)]
        this.RenderColumnAttribute(column);     // [Column(...)]
#>
<#= AccessModifier(column) #> <#= InheritanceModifier(column) #>Live<<#= TypeName(column) #>> <#= PropertyName(column) #> { get { return this.<#= FieldName(column) #>; } }
<#+
    }

    /// <summary>
    /// Generates a boolean field used as a flag to control serialization of 
    /// </summary>
    private void RenderSerializationField()
    {
        if (this.typeHasSerializableAssociation)
        {
#>

private bool serializing;
<#+
        }
    }

    /// <summary>
    /// Generates methods that receive serialization notifications
    /// </summary>
    private void RenderSerializationMethods()
    {
        if (this.typeHasSerializableAssociation)
        {
#>

[OnSerializing]
[EditorBrowsableAttribute(EditorBrowsableState.Never)]
internal void OnSerializing(StreamingContext context)
{
	this.serializing = true;
}

[OnSerialized]
[EditorBrowsableAttribute(EditorBrowsableState.Never)]
internal void OnSerialized(StreamingContext context)
{
	this.serializing = false;
}
<#+
        }
    }

    /// <summary>
    /// Renders [Table] attribute for the data class if it is mapped to a table.
    /// </summary>
    private void RenderTableAttribute()
    {
        if (this.BaseTypes.Length == 0 && !string.IsNullOrEmpty(this.Table.Name))
        {
            this.WriteLine("[Table(Name = \"{0}\")]", this.Table.Name);
        }
    }

    /// <summary>
    /// Renders conditional using directives
    /// </summary>
    private void RenderUsingDirectives()
    {
        if (this.IsDataContract(this.Type))
        {
            this.WriteLine("using System.Runtime.Serialization;");
			this.Output.References.Add("System.Runtime.Serialization");
        }
    }

    /// <summary>
    /// Converts the specified enum value to C# access modifier ("protected", "private", etc.)
    /// </summary>
    private static string ToCSharp(AccessModifier accessModifier)
    {
        if (accessModifier == GeneratedTextTransformation.AccessModifier.ProtectedInternal)
            return "protected internal";
        else
            return accessModifier.ToString().ToLower();
    }

    /// <summary>
    /// Converts the specified enum value to C# inheritance modifier ("new", "override", etc.)
    /// </summary>
    private static string ToCSharp(MemberModifier modifier, bool specified)
    {
        if (specified)
        {
            if (modifier == MemberModifier.NewVirtual)
                return "new virtual ";
            else
                return modifier.ToString().ToLower() + " ";
        }

        // When "None" was selected in the designer
        return string.Empty;
    }

    /// <summary>
    /// Returns type of the specified <paramref name="column"/>, converted to a built-in C# type if possible.
    /// </summary>
    private static string TypeName(Column column)
    {
        // Use built-in C# type, if possible
        string typeName = CSharpTypeName(column.Type);
        if (column.CanBeNull) // If column allows null values
        {
            // Determine if the type is a value or a reference
            string clrName = ClrTypeName(column.Type);
            System.Type type = System.Type.GetType(clrName);

            // If the type is defined outside of mscorlib assembly
            if (type == null)
            {
                // Try to find it in the other assemblies
                foreach (System.Reflection.Assembly assembly in System.AppDomain.CurrentDomain.GetAssemblies())
                {
                    type = assembly.GetType(clrName);
                    if (type != null)
                    {
                        break;
                    }
                }
            }

            // Unless we know with certainty that column type is a reference
            if (type == null || type.IsValueType)
            {
                // Assume it's a value type and use a nullable type
                typeName += "?";
            }
        }

        return typeName;
    }
}
#>
<#+
public struct AssociationInfo
{
	public Table PrimaryTable;
	public Table ForeignTable;
	public Association PrimaryAssociation;
	public Association ForeignAssociation;
}

public static bool CardinalityIsOne(Association association)
{
	return association.CardinalitySpecified && association.Cardinality == Cardinality.One;
}

public static AssociationInfo GetAssociationInfo(Database database, string name)
{
	var ret = new AssociationInfo
	{
		PrimaryTable = database.Table.Single(t => t.Type.Items.OfType<Association>().Any(a => a.Name == name && !a.IsForeignKey)),
		ForeignTable = database.Table.Single(t => t.Type.Items.OfType<Association>().Any(a => a.Name == name && a.IsForeignKey)),
	};
	ret.PrimaryAssociation = ret.PrimaryTable.Type.Items.OfType<Association>().Single(a => a.Name == name && !a.IsForeignKey);
	ret.ForeignAssociation = ret.ForeignTable.Type.Items.OfType<Association>().Single(a => a.Name == name && a.IsForeignKey);

	return ret;
}
#>